#!/usr/bin/env python
from ascii_grafana import Grafana
from ascii_grafana.__version__ import __version__
import click
import logging
import os
import time


logging.basicConfig()
logger = logging.getLogger(__name__)


class AliasedGroup(click.Group):
    def get_command(self, ctx, cmd_name):
        rv = click.Group.get_command(self, ctx, cmd_name)
        if rv is not None:
            return rv
        matches = [x for x in self.list_commands(ctx)
                   if x.startswith(cmd_name)]
        if not matches:
            return None
        elif len(matches) == 1:
            return click.Group.get_command(self, ctx, matches[0])
        ctx.fail('Too many matches: %s' % ', '.join(sorted(matches)))


@click.group(cls=AliasedGroup)
@click.version_option(__version__)
@click.option('-v', '--verbose', count=True)
@click.option('-q', '--quiet', count=True)
def cli(verbose, quiet):
    verbosity = 1 - quiet + verbose

    if verbosity <= 0:
        verbosity = 0
    elif verbosity >= 4:
        verbosity = 4

    # level_table = [logging.DEBUG, logging.INFO, logging.WARNING, logging.ERROR, logging.CRITICAL]
    level_table = [logging.CRITICAL, logging.ERROR, logging.WARNING, logging.INFO, logging.DEBUG]
    logging.getLogger('').setLevel(level_table[verbosity])


@cli.command()
@click.option('--api_key', type=str)
@click.option('--baseurl', type=str)
@click.option('-d', '--dashboard', 'dashboard_uid', type=str)
@click.option('--rows', type=int, default=None)
@click.option('--cols', type=int, default=None)
@click.option('--loop', type=int, default=None)
def dashboard(api_key, baseurl, dashboard_uid, rows, cols, loop):

    g = Grafana(api_key, baseurl)
    d = g.dashboard(dashboard_uid)

    if cols is None and rows is None:
        cols, rows = os.get_terminal_size(0)

    panels = d.panels

    if loop is None:
        for p in panels:
            p.render(rows=rows, cols=cols)
    else:
        while True:
            for p in panels:
                p.render(rows=rows, cols=cols)
                time.sleep(loop)


if __name__ == '__main__':
    cli()
